name: Java CI/CD Pipeline

on:
  workflow_dispatch
  # push:
  #   branches:
  #     - main

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      # 3. Build + Unit Test + JaCoCo
      - name: Build with Maven
        run: mvn clean verify -Dmaven.test.failure.ignore=false

      - name: Generate JaCoCo Report
        run: mvn jacoco:report

      # 4. Dependency vulnerability check with OWASP
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "java-app"
          path: "."
          format: "ALL"
          out: "dependency-check-report"
      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report

      # 5. SonarQube Analysis
      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=my-org_my-java-app
            -Dsonar.organization=my-org
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # 6. Push artifact to JFrog
      - name: Push artifact to JFrog
        run: |
          curl -u ${{ secrets.JFROG_USER }}:${{ secrets.JFROG_PASSWORD }} \
            -T target/myapp.jar \
            "https://mycompany.jfrog.io/artifactory/libs-release-local/myapp/myapp-1.0.0.jar"

  docker-build-push:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      # 7. Build and Push Docker Image
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/java-app
          GIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          docker build -t $IMAGE_NAME:$GIT_SHA -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:$GIT_SHA
          docker push $IMAGE_NAME:latest

  trigger-cd:
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
      # 8. Trigger CD workflow (separate repo or workflow_dispatch)
      - name: Trigger CD workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: my-org/my-cd-repo
          event-type: deploy
          client-payload: '{"image":"mydockerhub/java-app:latest"}'

  deploy-argocd:
    runs-on: ubuntu-latest
    needs: trigger-cd
    steps:
      # 9. Deploy to Kubernetes via ArgoCD
      - name: Install ArgoCD CLI
        run: curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x argocd && sudo mv argocd /usr/local/bin/

      - name: Login to ArgoCD
        run: argocd login ${{ secrets.ARGOCD_SERVER }} \
              --username ${{ secrets.ARGOCD_USER }} \
              --password ${{ secrets.ARGOCD_PASSWORD }} \
              --insecure

      - name: Sync ArgoCD App
        run: argocd app sync my-java-app --grpc-web

      - name: Wait for Rollout
        run: argocd app wait my-java-app --timeout 300
